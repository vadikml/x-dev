//  Memory map file to generate linker scripts for programs to run on
//  the XTAV200 board.

// $Id: //depot/rel/Eaglenest/Xtensa/SWConfig/ldscripts/xtav200-rt.parm#1 $

// Customer ID=4313; Build=0x53bab; Copyright (c) 2004-2013 by Tensilica Inc.  ALL RIGHTS RESERVED.
// These coded instructions, statements, and computer programs are the
// copyrighted works and confidential proprietary information of Tensilica Inc.
// They may not be modified, copied, reproduced, distributed, or disclosed to
// third parties in any manner, medium, or form, in whole or in part, without
// the prior written consent of Tensilica Inc.

//  Show more details if configuration targets a Tensilica-supported FPGA board
//  (for XTAV200, this gives us the iocached and iobypass areas):
INCLUDE_XTBOARD_MEMORIES = try

//  The XTAV200 board has 96 MB of system RAM and up to 32 MB of "ROM" (as RAM).
OVERRIDE MEMORY sram MAXSIZE=0x06000000
OVERRIDE MEMORY srom MAXSIZE=0x02000000


// A memory map is a sequence of memory descriptions and
// optional parameter assignments.
//
// Each memory description has the following format:
//   BEGIN <name>
//     <addr> [,<paddr>] : <mem-type> : <mem-name> : <size> [,<psize>]
//                       : [writable] [,executable] [,device] ;
//     <segment>*
//   END <name>
//
// where each <segment> description has the following format:
//     <seg-name> : F|C : <start-addr> - <end-addr> [ : STACK ] [ : HEAP ]
//                : <section-name>* ;
//
// Each parameter assignment is a keyword/value pair in the following format:
//   <keyword> = <value>                (no spaces in <value>)
// or
//   <keyword> = "<value>"              (spaces allowed in <value>)
//
// The following primitives are also defined:
//   PLACE SECTIONS( <section-name>* ) { WITH_SECTION(<section-name>)
//                                       | IN_SEGMENT(<seg-name>) }
//
//   NOLOAD <section-name1> [ <section-name2> ... ]
//
// Please refer to the Xtensa LSP Reference Manual for more details.
//
BEGIN dram0
0x3ffe0000: dataRam : dram0 : 0x20000 : writable ;
 dram0_0 : C : 0x3ffe0000 - 0x3fffffff : .dram0.rodata .dram0.literal .dram0.data .dram0.bss;
END dram0

BEGIN iram0
0x40000000: instRam : iram0 : 0x20000 : executable, writable ;
 iram0_0 : C : 0x40000000 - 0x4000000f : .DebugExceptionVector.literal;
 iram0_1 : F : 0x40000010 - 0x4000001b : .DebugExceptionVector.text;
 iram0_2 : C : 0x4000001c - 0x4000001f : .NMIExceptionVector.literal;
 iram0_3 : F : 0x40000020 - 0x4000002b : .NMIExceptionVector.text;
 iram0_4 : C : 0x4000002c - 0x4000002f : .KernelExceptionVector.literal;
 iram0_5 : F : 0x40000030 - 0x4000004b : .KernelExceptionVector.text;
 iram0_6 : C : 0x4000004c - 0x4000004f : .UserExceptionVector.literal;
 iram0_7 : F : 0x40000050 - 0x4000006b : .UserExceptionVector.text;
 iram0_8 : C : 0x4000006c - 0x4000006f : .DoubleExceptionVector.literal;
 iram0_9 : F : 0x40000070 - 0x4000007f : .DoubleExceptionVector.text;
 iram0_10 : C : 0x40000080 - 0x4001ffff : .iram0.literal .iram0.text;
END iram0

BEGIN srom
0x50000000: sysrom : srom : 0x1000000 : executable ;
 srom0 : F : 0x50000000 - 0x500002ff : .ResetVector.text;
 srom1 : C : 0x50000300 - 0x50ffffff : .srom.rodata .srom.literal .srom.text .rom.store;
END srom

BEGIN sram
0x60000000: sysram : sram : 0x4000000 : executable, writable ;
 sram0 : C : 0x60000000 - 0x63ffffff :  STACK :  HEAP : .sram.rodata .rodata .sram.literal .literal .sram.text .text .sram.data .data .sram.bss .bss;
END sram

BEGIN iocached
0x70000000: io : iocached : 0xda00000 : executable, writable ;
END iocached

BEGIN rambypass
0x80000000: sysram : rambypass : 0x10000000 : device, executable, writable ;
END rambypass

BEGIN iobypass
0x90000000: io : iobypass : 0xda00000 : device, executable, writable ;
END iobypass

